#!/usr/bin/env perl

=head1 NAME

occi - Adafruit Occidentalis Configuration Helper for Raspberry Pi

=head1 DESCRIPTION

occi is a simple utility for applying configuration settings like
hostname and WiFi credentials to your Raspberry Pi.

Settings are stored in a simple text file, usually
F</boot/occidentalis.txt>.

=cut

use warnings;
use strict;

package OcciConfig v0.1.4;

my $OCCI_CONFIG = "/boot/occidentalis.txt";
my $verbose = 1;

# The $VERSION here comes from the package line above:
print "Adafruit Occidentalis configuration helper, ${OcciConfig::VERSION}\n";

# Make sure there's a config file available.
unless (-f $OCCI_CONFIG) {
  print <<"HELPTEXT";
It looks like you don't have a $OCCI_CONFIG yet.

In order to create one:

    sudo nano $OCCI_CONFIG

And then add configuration keys like:

    hostname=somepi

See /usr/share/doc/occi/occidentalis_example.txt for a full example.
HELPTEXT

  exit 1;
}

my %config = parse_config($OCCI_CONFIG);

if ($verbose) {
  print "Configuration from $OCCI_CONFIG\n";
  foreach my $key (keys %config) {
    print "\t$key: $config{$key}\n";
  }
}

{
  # This bit of magic will find every sub starting with "handle_".
  # It just stands in for explicitly calling:
  #
  #   handle_hostname(%config);
  #   handle_wifi(%config);
  #
  # and so on down the line.

  no strict 'refs';
  my (@handlers) = grep { defined &{"OcciConfig\::$_"} && m/^handle_/ } keys %{"OcciConfig\::"};

  print "Handlers:\n" if $verbose;
  foreach my $handler (@handlers) {
    print "\t" . $handler . "\n" if $verbose;
    my @log = &{$handler}(%config);
    foreach my $logline (@log) {
      print "\t\t$logline\n" if $verbose;
    }
  }
}

exit 0;

=head1 CONFIGURATION HANDLERS

To add a handler, just write a sub that takes the %config hash, like so,
and returns a list containing one or more log items:

    sub handle_foo {
      my %config = @_;
      return ('nothing to do here');
    }

It will automatically be called every time occi runs.

=over

=item handle_hostname()

Update current hostname and make sure it's set properly at boot.

=cut

sub handle_hostname {
  my %config = @_;

  return ('no hostname specified')
    unless defined $config{hostname};

  my @log;

  # What's the existing configuration?
  chomp(my $existing_etc_hostname = get_file('/etc/hostname'));
  chomp(my $existing_hostname = `hostname`);

  unless ($existing_etc_hostname eq $config{hostname}) {
    # Make sure this is set correctly at next boot
    push @log, 'Setting /etc/hostname to ' . $config{hostname};
    put_file('/etc/hostname', $config{hostname});
  }

  unless ($existing_hostname eq $config{hostname}) {
    # Make sure this is set correctly right _now_.
    push @log, 'Setting current hostname to ' . $config{hostname};
    system('hostname', $config{hostname});
  }

  # Make sure our new hostname is mentioned in /etc/hosts:
  my $etc_hosts = get_file('/etc/hosts');
  my $new_etc_hosts = $etc_hosts;
  my $config_hostline = "127.0.1.1\t$config{hostname}";
  $new_etc_hosts =~ s/^(127[.]0[.]1[.]1\s+${existing_hostname})$/$config_hostline/m;
  if ($new_etc_hosts !~ /$config_hostline/) {
    $new_etc_hosts .= "\n$config_hostline";
  }
  if ($etc_hosts ne $new_etc_hosts) {
    push @log, 'Adding ' . $config_hostline . ' to /etc/hosts';
    put_file('/etc/hosts', $new_etc_hosts);
  }

  return @log;
}

=item handle_wifi()

=cut

sub handle_wifi {
  my %config = @_;

  my $conf_file = '/etc/wpa_supplicant/wpa_supplicant.conf';

  return ('no wifi_ssid specified')
    unless defined $config{wifi_ssid};

  my @log = 'Configuring ' . $config{wifi_ssid};

  my $network_config = capture_output(
    'wpa_passphrase',
    $config{wifi_ssid},
    $config{'wifi_password'}
  );

  my $blurb = get_blurb();

  $network_config = <<"WPA";
# $blurb
ctrl_interface=DIR=/var/run/wpa_supplicant GROUP=netdev
update_config=1
$network_config
WPA

  push @log, "Writing $conf_file";

  put_file(
    $conf_file,
    $network_config,
    $conf_file . '.backup'
  );

  return @log;
}

=back

=head1 UTILITY SUBROUTINES

=over

=item parse_config($path_to_file)

Grab a hash of configuration options out of some text file,
formatted like so:

    key1=value
    key2=value2

=cut

sub parse_config {
  my %config;
  my ($config_path) = @_;
  my $config_str = get_file($config_path);

  # Crude dos2unix:
  $config_str =~ s/\r\n/\n/g;

  while ($config_str =~ m{^([a-z_]+) = (.*?)$}ixmg) {
    my $key = $1;
    my $value = $2;
    $config{$key} = $value;
  }

  return %config;
}

=item get_file($path_to_file)

Returns the contents of a given file as a string.

=cut

sub get_file {
  my ($path) = @_;

  if (! -e $path) {
    die "$path doesn't appear to exist."
  }

  local $/ = undef;
  open my $fh, '<', $path
    or die "Failed opening $path: $!"; 
  my $contents = <$fh>;
  close $fh;

  return $contents;
}

=item put_file($path, $content)

Put $content in the file at $path.

=cut

sub put_file {
  my ($path, $content, $backup_path) = @_;

  # Handle one-time backups - this could use some rethinking.
  if (defined $backup_path) {
    if (! -e $backup_path) {
      if (-e $path) {
        my $old_contents = get_file($path);
        put_file($backup_path, $old_contents);
      }
    }
  }

  open my $fh, '>', $path
    or die "Failed opening $path: $!"; 
  print $fh $content;
  close $fh;
}

=item get_blurb()

Return a useful blurb for inclusion in config file comments.

=cut

sub get_blurb {
  return "This file is managed by $OCCI_CONFIG";
}


=item capture_output($command, @args)

Capture output from a given command without invoking the shell.

This is a simplified version of a routine from:

http://search.cpan.org/~pjf/IPC-System-Simple-1.25/

=cut

sub capture_output {
  my ($command, @args) = @_;

  my $wantarray = wantarray();

  pipe(my ($read_fh, $write_fh))
    or die("Can't create pipe: $!");

  # This next line also does an implicit fork.
  my $pid = open(my $pipe, '-|');  ## no critic

  if (not defined $pid) {
    die("$command: $!");
  } elsif (not $pid) {
    # Child process, execs command.

    close($read_fh);

    no warnings;   ## no critic

    CORE::exec { $command } $command, @args;

    # Oh no, exec fails!  Send the reason why to
    # the parent.

    print {$write_fh} int($!);
    exit(-1);
  }

  {
    # In parent process.

    close($write_fh);

    # Parent process, check for child error.
    my $error = <$read_fh>;

    # Tidy up our pipes.
    close($read_fh);

    # Check for error.
    if ($error) {
      # Setting $! to our child error number gives
      # us nice looking strings when printed.
      local $! = $error;
      die("$command: $!");
    }
  }

  # Parent process, we don't care about our pid, but we
  # do go and read our pipe.

  if ($wantarray) {
    my @results = <$pipe>;
    close($pipe);
    return @results;
  }

  my $results = join("", <$pipe>);
  close($pipe);

  return $results;
}


=back

=head1 AUTHOR

Brennen Bearnes
Todd Treece

=head1 COPYING

The MIT License (MIT)

Copyright (c) 2015 Adafruit Industries

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.

=cut
